name: Deploy Excalidraw App

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

env:
  NODE_VERSION: "20"
  PNPM_VERSION: "9.0.0"

jobs:
  # Test and build
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: cd packages/db && pnpm prisma generate

      - name: Type check
        run: pnpm turbo build --filter=!whiteboard

      - name: Build frontend
        run: cd apps/whiteboard && pnpm build
        env:
          NEXT_PUBLIC_HTTP_BACKEND: ${{ secrets.NEXT_PUBLIC_HTTP_BACKEND }}
          NEXT_PUBLIC_WS_URL: ${{ secrets.NEXT_PUBLIC_WS_URL }}

  # Deploy database migrations
  migrate-db:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run database migrations
        run: cd packages/db && pnpm prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

  # Deploy frontend to Vercel

  # Deploy frontend to Vercel
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [test, migrate-db]
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: cd packages/db && pnpm prisma generate

      # Build & deploy via Vercel from repo root because Project Root Directory is already apps/whiteboard
      - name: Deploy to Vercel (pull/build/deploy)
        run: |
          npm install -g vercel
          vercel pull --yes --environment=production --token ${{ secrets.VERCEL_TOKEN }}
          vercel build --prod --token ${{ secrets.VERCEL_TOKEN }}
          vercel deploy --prebuilt --prod --token ${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  # Deploy HTTP API to Railway
  deploy-http-api:
    runs-on: ubuntu-latest
    needs: [test, migrate-db]
    if: github.ref == 'refs/heads/master'
    env:
      RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      RAILWAY_SERVICE_ID: ${{ secrets.RAILWAY_SERVICE_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy HTTP API to Railway
        working-directory: apps/http
        run: |
          npm install -g @railway/cli
          railway up --service "$RAILWAY_SERVICE_ID" --detach

  # Deploy WebSocket to Railway
  deploy-websocket:
    runs-on: ubuntu-latest
    needs: [test, migrate-db]
    if: github.ref == 'refs/heads/master'
    env:
      RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      RAILWAY_SERVICE_ID: ${{ secrets.RAILWAY_WEBSOCKET_SERVICE_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy WebSocket to Railway
        working-directory: apps/websocket
        run: |
          npm install -g @railway/cli
          railway up --service "$RAILWAY_SERVICE_ID" --detach
